<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.1.1">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>273</x>
      <y>84</y>
      <w>385</w>
      <h>308</h>
    </coordinates>
    <panel_attributes>Projection
--
+zBuffer : std::vector&lt;std::vector&lt;Pxl&gt; &gt;
+camPos: std::vector&lt;float&gt;
+transMat: std::vector&lt;float&gt;
+projMat: std::vector&lt;float&gt;
-transformation:Transformation*
-facePixelBuffer: std::set&lt;coord&gt;
-absCoordA: std::vector&lt;float&gt;
-absCoordB: std::vector&lt;float&gt;
-mappedPointA: std::vector&lt;float&gt;
-mappedPointB: std::vector&lt;float&gt;
-coordCrossX: std::vector&lt;float&gt;
-coordCrossY: std::vector&lt;float&gt;
-coordCrossZ: std::vector&lt;float&gt;
--
-bresenline (ax:int, ay:int, bx:int, by:int, pntAzwei:float {read only},
                    SUBy1y2:float {read only}) :void
-rasterization (c:Color*{read only}) :void
+Projection (argc:int, argv[]:char*, transformationArg:Transformation*)
+isVisible (faceId:unsigned int{read only}, current:Model*{read only}) :bool
+map(current:Model*) :void
+getCoordCrossX: *std::vector&lt;float&gt;
+getCoordCrossY: *std::vector&lt;float&gt;
+getCoordCrossZ: *std::vector&lt;float&gt;
+setCoordCrossX(v: std::vector&lt;float&gt;): void
+setCoordCrossY(v: std::vector&lt;float&gt;): void
+setCoordCrossZ(v: std::vector&lt;float&gt;): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>42</x>
      <y>448</y>
      <w>350</w>
      <h>378</h>
    </coordinates>
    <panel_attributes>Transformation
--
-camPos: std::vector&lt;float&gt;*
-std::vector&lt;float&gt; moveDirectionX={1,0,0,0}
-std::vector&lt;float&gt; moveDirectionY={0,1,0,0}
-std::vector&lt;float&gt; moveDirectionZ={0,0,1,0}
--
+move (m:Model*{read only},
              direction:char{read only}
              speed:int{read only}) :void
+rotatePoint (alpha: float{read only},axis: char{read only},
                      pnt:std::vector&lt;float&gt;*{read only},
                      ret:std::vector&lt;float&gt;*{read only}): void
+rotateFigure(alpha: float{read only},axis: char{read only},
                       m:*Model{read only}): void
+rotate (alpha: float{read only},axis: char{read only},
              m:*Model{read only}): void
+rotate (alpha: float{read only},axis: char{read only},
              m:*Model{read only},um:std::vector&lt;float&gt;*): void
+matMul (mA:std::vector&lt;float&gt;*{read only},
                 rowsA: unsigned int{read only},
                 colsB: unsigned int{read only},
                 clsArwsB: unsigned int{read only},
                 mB: std::vector&lt;float&gt;*{read only},
                 mRet: std::vector&lt;float&gt;*{read only}): void
+align (m:Model*{read only},target:std::vector&lt;float&gt;target):void
+rotateCam (alpha:float{read only},
                     axis: char{read only},
                     modelListArg:std::vector&lt;Model&gt;*,
                     animListArg:std::vector&lt;Anim&gt;*, 
                     camPos: std::vector&lt;float&gt;*{read only}): void
+changeAlignment (m:Model*{read only},target:Model*{read only})
+moveCamAlongAlignment (modelListArg:std::vector&lt;Model&gt;*,
                                              direction:char{read only}): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>707</x>
      <y>140</y>
      <w>308</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>Reader
--
-fs: std::fstream
-s: std::string
-name: std::string
-i,j: int
-amtPnts: unsigned int
-amtFaces: unsigned int
-pointsPerFace: std::vector&lt;unsigned int&gt;
-alignment: std::vector&lt;std::vector&lt;float&gt; &gt;
-pos: std::vector&lt;float&gt;
-points: std::vector&lt;std::vector&lt;float&gt; &gt;
-faces: std::vector&lt;std::vector&lt;unsigned short&gt; &gt;
--
-allocPntrs(): void
+readData(modelList:std::vector&lt;Model&gt;*{read only},
                   colorList:std::vector&lt;struct Color&gt;*{read only},
                   transformation: Transformation*): void
+readAnim(animList:std::vector&lt;Anim&gt;*{read only},
                   modelList: std::vector&lt;Model&gt;*{read only},
                   transformation: Transformation*): void
+readTrafo(animList:std::vector&lt;Anim&gt;*{read only},
                   transformation: Transformation*): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>714</x>
      <y>539</y>
      <w>357</w>
      <h>385</h>
    </coordinates>
    <panel_attributes>Model
--
-faces: std::vector&lt;std::vector&lt;unsigned short&gt; &gt;
-points: std::vector&lt;std::vector&lt;float&gt; &gt;
-alignment: std::vector&lt;std::vector&lt;float&gt; &gt;
-getsProjected
+pos: std::vector&lt;float&gt;
+color: Color*
+name:std::string
--
-extractPntIDsOf(mPart: *Model): void
-addJointsAxis(nArg: std::vector&lt;float&gt;{read only}): void
+Model (nameArg:std::string, posArgstd::vector&lt;float&gt;,
              pointsArg:std::vector&lt;std::vector&lt;float&gt; &gt;,
              facesArg: std::vector&lt;std::vector&lt;unsigned short&gt; &gt;)
+~Model() :void
+getPoints(): std::vector&lt;std::vector&lt;float&gt;&gt;*
+getPoint(id: unsigned int): std::vector&lt;float&gt;*
+getPos(): std::vector&lt;float&gt;*
+getAlignmentsLineVec(x: unsigned int): std::vector&lt;float&gt;*
+getFace(faceId: unsigned int): std::vector&lt;unsigned short&gt;
+direction: char
+getFacesSize(faceId: unsigned int):unsigned int
+getFaceSize(): unsigned int
+getPointsCoord(i: unsigned short,c: unsigned short): float
+getPointsSize(): unsigned int
+getAlignment(x: unsigned int,y:unsigned int): float
+setPoint(i: unsigned int,pnt: std::vector&lt;float&gt;): void
+setAlignment(l: unsigned int,align:std::vector&lt;float&gt;): void
+addJoint(mPart: *Model,nArg: std::vector&lt;float&gt;{read only}): void
+rotateJoint(alpha: float{read only}, id: unsigned int{read only}): void
+getJoints(): std::vector&lt;std::vector&lt;float&gt;&gt;
+setJoint(id: unsigned int, nArg: std::vector&lt;float&gt;): void
+getGetsProjected(): bool
+setGetsProjected(b: bool{read only}) void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>189</x>
      <y>84</y>
      <w>70</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>*&lt;&lt;struct&gt;&gt;*
Pxl
--
z:float
c:Color</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>63</x>
      <y>182</y>
      <w>203</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>*&lt;&lt;struct&gt;&gt;*
Coord
--
hor:int
ver:int
bool operator* &lt;(coord&amp; c{read only}) </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>63</x>
      <y>259</y>
      <w>168</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>Um den Vergleichoperator[&lt;] 
f√ºr Werte dieser Struktur zu 
redefinieren
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>245</x>
      <y>161</y>
      <w>42</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=.&gt;</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>252</x>
      <y>98</y>
      <w>35</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=.&gt;</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>728</x>
      <y>448</y>
      <w>84</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>*&lt;&lt;struct&gt;&gt;*
Color
--
isColored:bool
red:float
green:float
blue:float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>707</x>
      <y>427</y>
      <w>371</w>
      <h>504</h>
    </coordinates>
    <panel_attributes>Model.h
--
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>49</x>
      <y>56</y>
      <w>616</w>
      <h>343</h>
    </coordinates>
    <panel_attributes>Projection.h
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>35</x>
      <y>427</y>
      <w>364</w>
      <h>406</h>
    </coordinates>
    <panel_attributes>Transformation.h
--
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>700</x>
      <y>119</y>
      <w>322</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>Reader.h
--
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>56</x>
      <y>77</y>
      <w>119</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>&lt;Pxl&gt; bildet Elemente 
von &lt;zBuffer&gt; ab. 
&lt;Coord&gt; bildet 
Elemente von
&lt;facePixelBuffer&gt; ab.
bg=gray
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1106</x>
      <y>385</y>
      <w>196</w>
      <h>189</h>
    </coordinates>
    <panel_attributes>Anim.h
--
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1071</x>
      <y>168</y>
      <w>231</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>Target.h
--
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1113</x>
      <y>406</y>
      <w>182</w>
      <h>161</h>
    </coordinates>
    <panel_attributes>Anim
--
-m: Model*
-targetPointingOn: int
-direction: char
-targets: std::vector&lt;Target*&gt;
--
+Anim (m: Model*)
+getNrTargets(): int
+focusNextTarget(): void
+getDirection(): char
+getModel():Model*
+addTarget(newTarget: Model*)
+getTarget(i: int): Target*
+focussedTarget(): Target*
fg=black
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1078</x>
      <y>189</y>
      <w>217</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>Target
--
-totalNrSteps: int
-stepsDone: int
-from: Model*
-to: Model*
--
+Target (fromArg: Model*,toArg: Model*)
+getTotalNrSteps(): int
+getStepsDone(): int
+resetStepsDone(): void
+incrementStepsDone(): void
+getFrom(): Model*
+getTo(): Model*
fg=black
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>441</x>
      <y>560</y>
      <w>259</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>Start.cpp
--
projection: Projection*
transformation: Transformation*
modelList: std::vector&lt;Model&gt;
animList: std::vector&lt;Anim&gt;
colorList: std::vector&lt;struct Color&gt;
isFS:bool=false
--
main (argc:int,argv[]:char*): int
keyboardFunc (key:unsigned char,x:int,y:int):void 
displayCallback():void 

bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>49</x>
      <y>231</y>
      <w>28</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=-
</panel_attributes>
    <additional_attributes>20.0;10.0;10.0;10.0;10.0;50.0;20.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>441</x>
      <y>700</y>
      <w>259</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>Schnittstelle zum Grafik- und Steuerungs-Api.
Um einzelnes Pixel zu f√§rben und Funktionsaufrufe 
Tasten zuzuweisen. 
In main werden Api-spezifische initialisierungen 
vorgenommen und das System wird gestartet.
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>553</x>
      <y>679</y>
      <w>21</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>70</x>
      <y>315</y>
      <w>196</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>In der Simulation wird die virtuelle 
Welt um die Kamera transformiert. 
Daraus resultiert dass die Achsen des 
Koordinatenkreuz', auf welche bei 
Rotation-Tranformationen referenziert 
wird, ver√§nderbar existieren m√ºssen.
bg=gray
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>791</x>
      <y>98</y>
      <w>273</w>
      <h>350</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>90.0;480.0;370.0;480.0;370.0;10.0;10.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>826</x>
      <y>119</y>
      <w>294</w>
      <h>287</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>400.0;390.0;290.0;390.0;290.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>7</x>
      <y>0</y>
      <w>735</w>
      <h>441</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>90.0;610.0;90.0;590.0;10.0;590.0;10.0;10.0;1030.0;10.0;1030.0;170.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>175</x>
      <y>427</y>
      <w>546</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>760.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>385</y>
      <w>1337</w>
      <h>581</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>1690.0;10.0;1890.0;10.0;1890.0;810.0;10.0;800.0;10.0;50.0;70.0;50.0;70.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>819</x>
      <y>147</y>
      <w>301</w>
      <h>294</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;400.0;10.0;380.0;350.0;380.0;350.0;10.0;410.0;10.0;410.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>287</x>
      <y>56</y>
      <w>462</w>
      <h>385</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>640.0;530.0;640.0;510.0;560.0;510.0;560.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>28</x>
      <y>56</y>
      <w>70</w>
      <h>385</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>80.0;530.0;80.0;500.0;10.0;500.0;10.0;10.0;30.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1134</x>
      <y>147</y>
      <w>196</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0;260.0;10.0;260.0;320.0;40.0;320.0;40.0;340.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>819</x>
      <y>364</y>
      <w>329</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;70.0;350.0;70.0;350.0;10.0;450.0;10.0;450.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>14</x>
      <y>427</y>
      <w>441</w>
      <h>434</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;10.0;10.0;600.0;580.0;600.0;580.0;200.0;610.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>252</x>
      <y>35</y>
      <w>434</w>
      <h>539</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0;600.0;10.0;600.0;630.0;440.0;630.0;440.0;750.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>644</x>
      <y>98</y>
      <w>147</w>
      <h>476</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>190.0;30.0;190.0;10.0;70.0;10.0;60.0;590.0;10.0;590.0;10.0;660.0</additional_attributes>
  </element>
</diagram>
